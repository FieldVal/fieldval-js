{
    "name": "FieldVal",
    "code": [
        {
            "name": "FieldVal Error Structure",
            "type": "js",
            "contents": "//YOUR INPUT\nvar data = {\n\t\"my_email\": \"almost@@example.com\",\n    \"my_integer\": \"clearly not an integer\",\n    \"multiple_of_three\": 8\n}\n\n//FIELDVAL OUTPUT\n{\n    \"invalid\": {\n        \"my_email\": {\n            \"error\": 107,\n            \"error_message\": \"Invalid email address format.\"\n        },\n        \"my_integer\": {\n            \"error_message\": \"Incorrect field type. Expected number, but received string.\",\n            \"error\": 2,\n            \"expected\": \"integer\",\n            \"received\": \"string\"\n        },\n        \"multiple_of_three\": {\n            \"error_message\": \"Not a multiple of three\",\n            \"error\": 1000\n        }\n    },\n    \"error_message\": \"One or more errors.\",\n    \"error\": 5\n}"
        },
        {
            "name": "Code",
            "type": "js",
            "runnable": true,
            "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval.js",
            "runnable_contents": "var data = {\n\t\"my_email\": \"almost@@example.com\",\n    \"my_integer\": \"clearly not an integer\",\n    \"multiple_of_three\": 8\n}\n\nvar validator = new FieldVal(data);\nvalidator.get(\"my_email\", BasicVal.email(true));\nvalidator.get(\"my_integer\", BasicVal.integer(true));\nvalidator.get(\"multiple_of_three\", BasicVal.integer(true), function(val){\n  if(val % 3 !== 0){\n    return {\n      \"error_message\": \"Not a multiple of three\",\n      \"error\": 1000\n    }\n  }\n});\n\ndocument.write(\"<pre>\"+JSON.stringify(validator.end(),null,4)+\"</pre>\");",
            "contents": "var validator = new FieldVal(data);\nvalidator.get(\"my_email\", BasicVal.email(true));\nvalidator.get(\"my_integer\", BasicVal.integer(true));\nvalidator.get(\"multiple_of_three\", BasicVal.integer(true), function(val){\n  if(val % 3 !== 0){\n    return {\n      \"error_message\": \"Not a multiple of three\",\n      \"error\": 1000\n    }\n  }\n});\n\nconsole.log(validator.end());"
        }
    ],
    "text": "<p>FieldVal is a Javascript library that allows you to easily create readable and structured error reports for any data.</p>\n<p>It works on both the front end in the browser and on the back end using Node.</p>\n<p>FieldVal comes with a collection of checks called BasicVal. These are standard checks such as email, numeric limits etc., but you can write your own FieldVal checks with simple functions.</p>\n<p>To start validating, pass your data to a new instance of <code>FieldVal</code>.</p>\n<p>Then use <code>.get(key_name, checks...)</code> to retrieve values whilst simultaneously building an error report.</p>\n<p>When you&#39;ve finished validating, use <code>.end()</code> to retrieve the error report or null if there were no errors.</p>\n<p>####Run the code example to the right####</p>\n<p>Try out FieldVal using CodePen by clicking the &quot;Run on Codepen&quot; button below the example.</p>\n<p>Try changing the data provided to <code>FieldVal</code> to see how the error changes.</p>\n",
    "sections": [
        {
            "name": "Node Usage",
            "code": [
                {
                    "contents": "var FieldVal = require('fieldval');\nvar BasicVal = FieldVal.BasicVal;\n\nvar validator = new FieldVal({\n\t\"my_key\": 37\n})\n\nvar my_key = validator.get(\"my_key\", BasicVal.integer(true), BasicVal.minimum(40));\n\nconsole.log(validator.end());"
                }
            ],
            "text": "<p>FieldVal works both in the browser as demonstrated in the demo above, and as a node package.</p>\n<p>To use FieldVal as a node package, install <code>fieldval</code> using <code>npm</code>:</p>\n<pre><code class=\"lang-bash\">npm install fieldval --save\n</code></pre>\n"
        },
        {
            "name": "Browser Usage",
            "code": [
                {
                    "contents": "<script type=\"text/javascript\" src=\"/PATH_TO/fieldval.js\"></script>\n<script type=\"text/javascript\">\n\nvar validator = new FieldVal({\n\t\"my_key\": 37\n})\n\nvar my_key = validator.get(\"my_key\", BasicVal.integer(true), BasicVal.minimum(40));\n\nconsole.log(validator.end());\n\n</script>"
                }
            ],
            "text": "<p>To use FieldVal in the browser as demonstrated above, include a script tag for the <code>fieldval.js</code> file.</p>\n",
            "sections": [
                {
                    "name": "Bower",
                    "text": "<p>FieldVal is available as a <a href=\"http://bower.io\">Bower</a> package. To install into your existing project, use:</p>\n<pre><code class=\"lang-bash\">bower install fieldval --save\n</code></pre>\n"
                },
                {
                    "name": "Manual Install",
                    "text": "<p>To use FieldVal in the browser without a package manager, download <code>fieldval.js</code> or <code>fieldval.min.js</code> from the <a href=\"https://github.com/FieldVal/fieldval-js/\">repository</a>.</p>\n<ul>\n<li><p><a href=\"https://raw.githubusercontent.com/FieldVal/fieldval-js/master/fieldval.js\">fieldval.js</a></p>\n</li>\n<li><p><a href=\"https://raw.githubusercontent.com/FieldVal/fieldval-js/master/fieldval.min.js\">fieldval.min.js</a></p>\n</li>\n</ul>\n"
                }
            ]
        },
        {
            "name": "Examples",
            "text": "",
            "sections": [
                {
                    "name": "Backend",
                    "code": [
                        {
                            "contents": "var FieldVal = require('fieldval');\nvar BasicVal = FieldVal.BasicVal;\n\nvar express = require('express');\nvar bodyParser = require('body-parser');\n\nvar app = express();\napp.use(bodyParser.json());\n\napp.post('/', function (req, res) {\n\tvar validator = new FieldVal(req.body);\n\tvar id = validator.get(\"id\", BasicVal.number());\n\tvar username = validator.get(\"username\", BasicVal.string());\n\tvar error = validator.end();\n\tif (error) {\n\t\treturn res.json(error);\n\t}\n\n\t//At this point we know that 'id' and 'username' are certainly valid types.\n\t//Proceed with the code\n\tres.json({success:true})\n})\n\napp.listen(3000);"
                        }
                    ],
                    "text": "<p>FieldVal can be used to validate an endpoint&#39;s input. If validation fails, a structured error is returned. Otherwise we can proceed with using extracted values.</p>\n<p>Example dependencies:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/express\">express</a></li>\n<li><a href=\"https://www.npmjs.com/package/body-parser\">bodyParser</a></li>\n</ul>\n"
                },
                {
                    "name": "Frontend",
                    "code": [
                        {
                            "type": "js",
                            "runnable": true,
                            "demo": true,
                            "css_external": "__CURRENT_DOMAIN__/demo_files/minimal.css",
                            "js_library": "jquery",
                            "js_external": [
                                "__CURRENT_DOMAIN__/demo_files/fieldval.js",
                                "__CURRENT_DOMAIN__/demo_files/fieldval-ui.js"
                            ],
                            "runnable_contents": "function validate_form(data) {\n\tvar validator = new FieldVal(data);\n\tvalidator.get(\"name\", BasicVal.string(true));\n\tvalidator.get(\"email\", BasicVal.email(true));\n\treturn validator.end();\n}\n\n\n$(document).ready(function(){\n\n\tvar output = $(\"<pre/>\");\n\tvar display_output = function(value) {\n\t\toutput.text(\"Error output:\\n\" + JSON.stringify(value, null, 4));\n\t}\n\t\n\tvar form = new FVForm()\n\t.add_field(\"name\", new FVTextField(\"Name\"))\n\t.add_field(\"email\", new FVTextField(\"Email\"))\n\t.on_submit(function(value){\n\t\tform.clear_errors();\n\t\tvar error = validate_form(value); \n\t\tif (error) {\n\t\t\tform.error(error);\n\t\t}\n\t\tdisplay_output(error);\n\t})\n  \n\tform.element.append(\n\t\t$(\"<button/>\").text(\"Submit\")\n\t).appendTo(\"body\");\n\toutput.appendTo(\"body\");\n\tform.submit();\n});",
                            "contents": "function validate_form(data) {\n\tvar validator = new FieldVal(data);\n\tvalidator.get(\"name\", BasicVal.string(true));\n\tvalidator.get(\"email\", BasicVal.email(true));\n\treturn validator.end();\n}\n\nvar form = new FVForm()\n.add_field(\"name\", new FVTextField(\"Name\"))\n.add_field(\"email\", new FVTextField(\"Email\"))\n.on_submit(function(value){\n\tform.clear_errors();\n\tvar error = validate_form(value); \n\tif (error) {\n\t\tform.error(error);\n\t} else {\n\t\talert(JSON.stringify(value));\n\t}\n})"
                        }
                    ],
                    "text": "<p>Another common use case for FieldVal is validating forms on a web page. The example displays integration with <a href=\"/docs/fieldvalui\">FieldVal UI</a> that not only creates a form, but also displays a structured error produced by FieldVal.</p>\n<p>Using <a href=\"/docs/fieldvalui\">FieldVal UI</a> is optional, but recommended.</p>\n"
                },
                {
                    "name": "Validating single value",
                    "code": [
                        {
                            "contents": "//CODE\nvar value = \"abc\";\nBasicVal.integer().check(value);\n\n//OUTPUT\n{\n\terror_message: 'Incorrect field type. Expected integer, but received string.',\n \terror: 2,\n  \texpected: 'integer',\n  \treceived: 'string' \n}"
                        }
                    ],
                    "text": "<p>It is possible to use <a href=\"/docs/fieldval/BasicVal\">BasicVal</a> check functions on a single value.</p>\n<p><code>.check()</code> is documented in a <a href=\"/docs/fieldval/Check%20Functions\">Check Functions</a> section.</p>\n"
                },
                {
                    "name": "Validating nested objects",
                    "code": [
                        {
                            "contents": "var validator = new FieldVal(val);\nvalidator.get(\"name\", BasicVal.string(true));\nvalidator.get(\"email\", BasicVal.email(true));\nvalidator.get(\"enquiry\", BasicVal.object(true), function(enquiry){\n    var inner_validator = new FieldVal(enquiry);\n    inner_validator.get(\"type\", BasicVal.string(true), BasicVal.one_of([\"One\",\"Two\"]))\n    inner_validator.get(\"message\", BasicVal.string(true))\n    return inner_validator.end();\n});\n\nvalidator.end();"
                        }
                    ],
                    "text": "<p>Nested objects can be validated using an inner_validator in a <a href=\"/docs/fieldval/Check%20Functions\">custom check function</a> that is validating the object.</p>\n"
                },
                {
                    "name": "Creating errors without validation",
                    "code": [
                        {
                            "contents": "//CODE\nvar validator = new FieldVal(null)\nvalidator.error(\"invalid_field\", {\n    error: 1020,\n    error_message: \"Value is invalid\"\n})\n\nvalidator.missing(\"missing_field\")\nvalidator.unrecognized(\"unrecognized_field\")\nvalidator.end()\n\n//OUTPUT\n{\n    \"invalid\": {\n        \"missing_field\": {\n            \"error_message\": \"Field missing.\",\n            \"error\": 1\n        },\n        \"invalid_field\": {\n            \"error\": 1020,\n            \"error_message\": \"Value is invalid\"\n        },\n        \"unrecognized_field\": {\n            \"error_message\": \"Unrecognized field.\",\n            \"error\": 3\n        }\n    },\n    \"error_message\": \"One or more errors.\",\n    \"error\": 5\n}"
                        }
                    ],
                    "text": "<p>Sometimes it is useful to create a structured error for a specific field without validating a value. This can be achieved by calling one of the following FieldVal object&#39;s methods:</p>\n<ul>\n<li><code>error(field_name, error)</code> </li>\n<li><code>unrecognized(field_name)</code> </li>\n<li><code>missing(field_name)</code> </li>\n</ul>\n<p><code>.unrecognized()</code> and <code>.missing()</code> are wrappers around <code>.error()</code> that insert the default errors.</p>\n"
                }
            ]
        },
        {
            "name": "Chaining",
            "text": "<p>FieldVal uses checks that can be &quot;chained&quot; in series to validate a single value. This allows code re-use and improves readability of validation checks.</p>\n<pre><code class=\"lang-javascript\">var my_integer = validator.get(&quot;my_integer&quot;, BasicVal.integer(true))\n</code></pre>\n<p>checks that the value is an integer and the <code>true</code> argument indicates that it is required.</p>\n<pre><code class=\"lang-javascript\">var my_integer = validator.get(&quot;my_integer&quot;, BasicVal.integer(true), BasicVal.minimum(42))\n</code></pre>\n<p>now also checks that the integer is at least <code>42</code>. </p>\n<p>You can build combinations from <a href=\"/docs/fieldval/BasicVal\">BasicVal</a> or just write your own as explained <a href=\"/docs/fieldval/Check Functions\">here</a> - they&#39;re just functions that return errors.</p>\n"
        },
        {
            "name": "Errors",
            "code": [
                {
                    "contents": "{\n\t\"error_message\": \"A message describing the error\",\n\t\"error\": 1017//A number associated with this particular error\n}"
                }
            ],
            "text": "<p>FieldVal uses a standard error structure. The most basic error structure is provided as an example to the right.</p>\n<p>To avoid conflicting with FieldVal error numbers (that begin at 1), your error numbers should start at 1000.</p>\n",
            "sections": [
                {
                    "name": "Object Errors",
                    "code": [
                        {
                            "contents": "//Example input\n{\n    \"my_integer\": \"Not an integer\",\n    \"my_object\": {\n        \"inner_field\": \"AB123DE\"\n    },\n    \"curveball\": \"Not expected!\"\n}\n\n//Example error\n{\n    \"invalid\": {\n        \"curveball\": {\n            \"error_message\": \"Unrecognized field.\",\n            \"error\": 3\n        },\n        \"my_array\": {\n            \"error_message\": \"Field missing.\",\n            \"error\": 1\n        },\n        \"my_integer\": {\n            \"error_message\": \"Incorrect field type. Expected integer, but received string.\",\n            \"error\": 2,\n            \"expected\": \"integer\",\n            \"received\": \"string\"\n        },\n        \"my_object\": {\n            \"invalid\": {\n                \"inner_field\": {\n                    \"error\": 4,\n                    \"error_message\": \"Multiple errors.\",\n                    \"errors\": [\n                        {\n                            \"error\": 106,\n                            \"error_message\": \"Value does not have prefix: ABC\"\n                        },\n                        {\n                            \"error\": 110,\n                            \"error_message\": \"Value does not have suffix: DEF\"\n                        }\n                    ]\n                }\n            },\n            \"error_message\": \"One or more errors.\",\n            \"error\": 5\n        }\n    },\n    \"error_message\": \"One or more errors.\",\n    \"error\": 5\n}"
                        }
                    ],
                    "text": "<p>FieldVal&#39;s error structure is designed to match the input structure on a per-key level. This is achieved by attaching each error to its appropriate key and building a hierarchical structure that can be easily navigated both visually and programmatically.</p>\n<p>There are three main keys for errors:</p>\n<ul>\n<li><p><code>error_message</code></p>\n<p>  This is the human-readable error message.</p>\n</li>\n<li><p><code>error</code></p>\n<p>  This is the error code. The basic codes and their associated <code>error_message</code> are:</p>\n<ul>\n<li><code>1</code> &quot;Field missing.&quot;</li>\n<li><code>2</code> &quot;Incorrect field type. Expected ___expected___.&quot;</li>\n<li><code>3</code> &quot;Unrecognized field.&quot;</li>\n<li><code>4</code> &quot;Multiple errors.&quot; - used when a single value has multiple errors.</li>\n<li><code>5</code> &quot;One or more errors.&quot; - used when an object or array&#39;s fields contain errors.</li>\n</ul>\n</li>\n<li><p><code>invalid</code></p>\n<p>  These fields have errors. Either they were not provided, but are required (missing), unrecognized because they were not looked for when validating or they contain an invalid value.</p>\n<ul>\n<li><code>my_integer</code> isn&#39;t an integer - it&#39;s a string</li>\n<li><code>my_object</code> contains invalid fields</li>\n<li><code>my_array</code> wasn&#39;t present</li>\n<li><code>curveball</code> wasn&#39;t recognized </li>\n</ul>\n</li>\n</ul>\n"
                },
                {
                    "name": "Multiple Errors",
                    "code": [
                        {
                            "contents": "{\n\t\"error\": 4,\n\t\"error_message\": \"Multiple errors.\",\n\t\"errors\": [\n\t\t{\n\t\t\t\"error\": 106,\n\t\t\t\"error_message\": \"Value does not have prefix: ABC\"\n\t\t},\n\t\t{\n\t\t\t\"error\": 110,\n\t\t\t\"error_message\": \"Value does not have suffix: XYZ\"\n\t\t}\n\t]\n}"
                        }
                    ],
                    "text": "<p>FieldVal&#39;s default behaviour is to stop checking a field after the first error is found, but sometimes it&#39;s useful to report multiple errors for the same key. In this case, the errors are contained with an array in the <code>errors</code> key. The structure is shown to the right.</p>\n"
                }
            ]
        },
        {
            "name": "Check Functions",
            "code": [
                {
                    "contents": "var my_check = function(value, emit){\n\n\tif(value!==\"My Exact Value\"){\n\t\treturn {\n\t\t\terror: 1000,\n\t\t\terror_message: \"I'm really picky. Enter 'My Exact Value'.\"\n\t\t}\n\t}\n\n}"
                }
            ],
            "text": "<p>FieldVal checks are simple functions that take a value and an emit function and return an error if the value was invalid. If the value is valid, the function does not return anything.</p>\n<ul>\n<li><code>value</code> is the value that this check is validating.</li>\n<li><code>emit</code> is a function that the check can use to change the value for subsequent checks and for the eventual output. (<a href=\"/docs/fieldval/Custom Check Functions/emit\">more info</a>)</li>\n</ul>\n<p>A check can be either a simple function or an object that implements <code>.check(value)</code> function.</p>\n",
            "sections": [
                {
                    "name": "Parameters",
                    "code": [
                        {
                            "contents": "var minimum = function(min_val, options) {\n\n    var check = function(value) {\n        if (value < min_val) {\n            return {\n\t            error: 1000,\n\t            error_message: \"Value was below \" + min_val\n\t        }\n        }\n    }\n\n    if(options){\n        //The check becomes part of the options object, which is returned\n        options.check = check;\n        return options\n    }\n\n    return check;\n}\n\nvar check = minimum(14);"
                        }
                    ],
                    "text": "<p>A check function must take a value and return an error. To make reusable checks that can be configured for each use using parameters, you must create a wrapper for the check.</p>\n<p>The example provided is a function that performs the same action as BasicVal.minimum.</p>\n<p><code>check</code> is now a function that will return an error if the value is less than <code>14</code>. This is because minimum is a wrapper that creates a function with access to the configuration parameters (<code>14</code> as <code>min_val</code> in this case).</p>\n<p><a href=\"/docs/fieldval/Options\">Options</a> are additional parameters. If <code>options</code> is set then the check becomes a property of the <code>options</code> object. The FieldVal library can use both an object that contains a <code>check</code> property and also a function directly.</p>\n"
                },
                {
                    "name": "emit",
                    "code": [
                        {
                            "contents": "var validator = new FieldVal({\n    \"my_money\": \"€7.54\"\n})\n \nvar my_money = validator.get(\"my_money\", \n    BasicVal.string(true), \n    BasicVal.prefix(\"€\"),\n    function(value, emit){\n     \n        emit(value.substring(1))\n \n    },\n    BasicVal.float({parse:true}),\n    BasicVal.minimum(5)\n);"
                        }
                    ],
                    "text": "<p>The <code>emit</code> function allows a check to not just validate a value, but also modify it - an example use case is shown to the right.</p>\n<p><code>emit</code> is most useful when the data is manipulated significantly in order to perform further validation, such as splitting into an array or parsing numeric strings.</p>\n"
                }
            ]
        },
        {
            "name": "Async",
            "code": [
                {
                    "type": "js",
                    "runnable": true,
                    "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval.js",
                    "runnable_contents": "var validator = new FieldVal({\n    my_number: 56,\n    my_email: \"test@example.com\"\n});\n\nvalidator.get_async(\n\t\"my_email\",\n\t[\n\t\tBasicVal.email({required: true}),\n\t\tfunction(val,emit,done){\n\t\t\tsetTimeout(function(){\n\t\t\t\tdone({\n\t\t\t\t\t\"error_message\": \"I couldn't find that email address\"\n\t\t\t\t});\n\t\t\t},500);\n\t\t}\n\t],\n\tfunction(my_email){\n\t\tvar element = document.createElement(\"div\");\n\t\telement.innerHTML = \"my_email: \"+my_email\n\t\tdocument.body.appendChild(element);\n\t}\n);\n\nvar my_number = validator.get(\"my_number\", BasicVal.number({required:true}));\n\nvalidator.end(function(error){\n\tvar element = document.createElement(\"pre\");\n\telement.innerHTML = JSON.stringify(error, null, 4);\n\tdocument.body.appendChild(element);\n});",
                    "contents": "var validator = new FieldVal({\n    my_number: 56,\n    my_email: \"test@example.com\"\n});\n\nvalidator.get_async(\n\t\"my_email\",\n\t[\n\t\tBasicVal.email({required: true}),\n\t\tfunction(val,emit,done){\n\t\t\tsetTimeout(function(){\n\t\t\t\tdone({\n\t\t\t\t\t\"error_message\": \"I couldn't find that email address\"\n\t\t\t\t})\n\t\t\t},500);\n\t\t}\n\t],\n\tfunction(my_email){\n\t\tconsole.log(\"my_email: \",my_email);\n\t}\n);\n\nvar my_number = validator.get(\"my_number\", BasicVal.number({required:true}));\n\nvalidator.end(function(error){\n\tconsole.log(error);\n});"
                }
            ],
            "text": "<p>Requiring an asynchronous action to validate a parameter is a common validation scenario.</p>\n<p>To use asynchronous checks, call <code>.get_async(key_name, check_array, [callback])</code> on the FieldVal instance.</p>\n<p><code>check_array</code> is an array of checks and <code>callback</code> is a function to call after validation has finished.</p>\n<p>You can use synchronous <code>.get</code> and asynchronous <code>.get_async</code> within the same FieldVal instance.</p>\n<p>Synchronous checks work with <code>.get_async</code>, but asynchronous checks will not work with <code>.get</code>.</p>\n<p>The <code>.end</code> function of the FieldVal instance takes a callback that will be called with the error if one is present.</p>\n<p><code>.end</code> waits for all fields to finish validating before calling the callback.</p>\n"
        },
        {
            "name": "BasicVal",
            "text": "<p>BasicVal is a set of standard FieldVal <a href=\"/docs/fieldval/Check%20Functions\">check functions</a>. Checks accept <a href=\"/docs/fieldval/Options\">options</a> as arguments and return typical FieldVal <a href=\"/docs/fieldval/Errors\">errors</a>.</p>\n<p>BasicVal can be found at <code>FieldVal.BasicVal</code>.</p>\n",
            "sections": [
                {
                    "name": "Type Checks",
                    "text": "<p>BasicVal&#39;s built-in type checks should be used to check that a value is of a particular type.</p>\n<p>The first parameter is usually a boolean indicating whether the field is required or not. The default is <code>true</code>. </p>\n<p>Whether or not the field is required can also be specified in the <code>options</code> parameter, which is an object. Such an <code>options</code> object would look like:</p>\n<p><code>{required: true}</code>.</p>\n<p>Some type checks such as <code>number</code> and <code>integer</code> can optionally be used to parse the value into the expected type if it is valid. This option is set via a flag:</p>\n<p><code>{parse: true}</code></p>\n<p>If a value is parsed, it is automatically emitted, meaning that all subsequent checks (and retrieval using .get), will receive the parsed value.</p>\n",
                    "sections": [
                        {
                            "name": "array",
                            "text": "<p><code>BasicVal.array([required], [options])</code></p>\n<p>Checks if the value is an array.</p>\n"
                        },
                        {
                            "name": "boolean",
                            "text": "<p><code>BasicVal.boolean([required], [options])</code></p>\n<p>Checks if the value is a boolean.</p>\n<p>Set <code>{parse: true}</code> in the <code>options</code> object to attempt to parse the value.</p>\n<p>If the value is either &quot;true&quot; or &quot;false&quot; as a string, it will be parsed to the corresponding boolean.</p>\n"
                        },
                        {
                            "name": "domain",
                            "text": "<p><code>BasicVal.domain([required],[options])</code></p>\n<p>Checks if the value is first a string, and then a domain.</p>\n"
                        },
                        {
                            "name": "email",
                            "text": "<p><code>BasicVal.email([required], [options])</code></p>\n<p>Checks if the value is first a string, and then an email.</p>\n"
                        },
                        {
                            "name": "integer",
                            "text": "<p><code>BasicVal.integer([required], [options])</code></p>\n<p>Checks if the value is an integer.</p>\n<p>Set <code>{parse: true}</code> in the <code>options</code> object to attempt to parse the value.</p>\n"
                        },
                        {
                            "name": "number",
                            "text": "<p><code>BasicVal.number([required], [options])</code></p>\n<p>Checks if the value is a number, including floats.</p>\n<p>Set <code>{parse: true}</code> in the <code>options</code> object to attempt to parse the value.</p>\n"
                        },
                        {
                            "name": "object",
                            "text": "<p><code>BasicVal.object([required], [options])</code></p>\n<p>Checks if the value is an object.</p>\n"
                        },
                        {
                            "name": "string",
                            "text": "<p><code>BasicVal.string([required], [options])</code></p>\n<p>Checks if the value is a string.</p>\n"
                        },
                        {
                            "name": "url",
                            "text": "<p><code>BasicVal.url([required],[options])</code></p>\n<p>Checks if the value is first a string, and then a url.</p>\n"
                        }
                    ]
                },
                {
                    "name": "Other Checks",
                    "sections": [
                        {
                            "name": "date",
                            "text": "<p><code>BasicVal.date(format, [options])</code></p>\n<p>Checks if the string value is a valid date in a specified format.</p>\n<p>Valid date components are;</p>\n<ul>\n<li><code>yyyy</code> 4 digit year (i.e 2015)</li>\n<li><code>yy</code> 2 digit year (i.e. 15)</li>\n<li><code>MM</code> months (i.e. 01)</li>\n<li><code>M</code> months without zero padding (i.e. 1)</li>\n<li><code>dd</code> days (i.e. 01)</li>\n<li><code>d</code> days without zero padding (i.e. 1)</li>\n<li><code>hh</code> hours (i.e. 08)</li>\n<li><code>h</code> hours without zero padding (i.e. 8)</li>\n<li><code>mm</code> minutes (i.e. 23)</li>\n<li><code>m</code> minutes without zero padding (i.e. 2)</li>\n<li><code>ss</code> seconds (i.e. 49)</li>\n<li><code>s</code> seconds without zero padding (i.e. 02)</li>\n</ul>\n<p>Valid separators:</p>\n<ul>\n<li><code> </code> (whitespace)</li>\n<li><code>-</code></li>\n<li><code>/</code></li>\n<li><code>:</code></li>\n</ul>\n<p>Optional options.emit options\n<code>DateVal.EMIT_COMPONENT_ARRAY</code> emits an array with date component values in the right order\n<code>DateVal.EMIT_OBJECT</code> emits an object in a following format:</p>\n<pre><code>{\n    year: 2014,\n    month: 12,\n    day: 12,\n    hour: 23,\n    minute: 49,\n    second: 58\n}\n</code></pre><p><code>DateVal.EMIT_DATE</code> emits a standard JavaScript Date object</p>\n"
                        },
                        {
                            "name": "date_format",
                            "text": "<p><code>BasicVal.date_format([options])</code></p>\n<p>Checks whether a specified string value is a valid date format.</p>\n"
                        },
                        {
                            "name": "date_format_array",
                            "text": "<p><code>BasicVal.date_format_array([options])</code></p>\n<p>Checks whether a specified value is a valid date format array (array of individual date components as described in <a href=\"/docs/fieldval/BasicVal/Other Checks/date\">date</a>).</p>\n"
                        },
                        {
                            "name": "does_not_contain",
                            "text": "<p><code>BasicVal.does_not_contain(characters, [options])</code></p>\n<p>Checks if strings does not contain any of the provided characters. <code>characters</code> can be either one character or a list of characters.</p>\n"
                        },
                        {
                            "name": "each",
                            "code": [
                                {
                                    "type": "js",
                                    "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval.js",
                                    "contents": "//CODE\nvar validator = new FieldVal({\n\tan_array: [44, 56, 3]\n});\n\nvalidator.get(\n\t'an_array',\n\tBasicVal.array(true),\n\tBasicVal.each(function(val,index,emit){\n\t\tvar error = BasicVal.integer().check(val); \n\t\tif(error)return error;\n\t\treturn BasicVal.minimum(40).check(val);\n\t})\n)\n\nconsole.log(JSON.stringify(validator.end(), null, 4));\n\n//OUTPUT\n{\n    \"invalid\": {\n        \"an_array\": {\n            \"invalid\": {\n                \"2\": {\n                    \"error\": 102,\n                    \"error_message\": \"Value is less than 40\"\n                }\n            },\n            \"error_message\": \"One or more errors.\",\n            \"error\": 5\n        }\n    },\n    \"error_message\": \"One or more errors.\",\n    \"error\": 5\n}"
                                }
                            ],
                            "text": "<p><code>BasicVal.each(on_each, [options])</code></p>\n<p>Iterates through the provided array and calls the <code>on_each</code> function on each array&#39;s value.</p>\n<p><code>on_each(value, index, emit)</code></p>\n<p>The provided function should return a FieldVal <a href=\"/docs/fieldval/Errors\">error</a> or null if there are no errors.</p>\n"
                        },
                        {
                            "name": "each_async",
                            "code": [
                                {
                                    "type": "js",
                                    "runnable": true,
                                    "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval.js",
                                    "runnable_contents": "var validator = new FieldVal({\n\tan_array: [44, 56, 3]\n});\n\nvalidator.get_async(\n\t'an_array',\n\t[\n\t\tBasicVal.array(true),\n\t\tBasicVal.each_async(function(val,index,emit,done){\n\t\t\tsetTimeout(function(){\n\t\t\t\tvar error = BasicVal.integer().check(val); \n\t\t\t\tif(error){\n\t\t\t\t\tdone(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdone(BasicVal.minimum(40).check(val));\n\t\t\t},1);\n\t\t})\n\t]\n)\n\nvalidator.end(function(error){\n\tvar element = document.createElement(\"pre\");\n\telement.innerHTML = JSON.stringify(error, null, 4);\n\tdocument.body.appendChild(element);\n});",
                                    "contents": "//CODE\nvar validator = new FieldVal({\n\tan_array: [44, 56, 3]\n});\n\nvalidator.get_async(\n\t'an_array',\n\t[\n\t\tBasicVal.array(true),\n\t\tBasicVal.each_async(function(val,index,emit,done){\n\t\t\tsetTimeout(function(){\n\t\t\t\tvar error = BasicVal.integer().check(val); \n\t\t\t\tif(error){\n\t\t\t\t\tdone(error);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tdone(BasicVal.minimum(40).check(val));\n\t\t\t},1);\n\t\t})\n\t]\n)\n\nvalidator.end(function(error){\n\tvar element = document.createElement(\"pre\");\n\telement.innerHTML = JSON.stringify(error, null, 4);\n\tdocument.body.appendChild(element);\n});"
                                }
                            ],
                            "text": "<p><code>BasicVal.each_async(on_each, [options])</code></p>\n<p>Iterates through the provided array and calls the <code>on_each</code> function on each array&#39;s value. The <code>on_each</code> function for <code>each_async</code> uses a callback to provide its response.</p>\n<p><code>on_each(value, index, emit, done)</code></p>\n<p>The provided function should call <code>done</code> with a FieldVal <a href=\"/docs/fieldval/Errors\">error</a> or with no arguments if there are no errors.</p>\n"
                        },
                        {
                            "name": "equal_to",
                            "text": "<p><code>BasicVal.equal_to(desired_value, [options])</code></p>\n<p>Checks if the value that is being validated is equal to the desired value.</p>\n"
                        },
                        {
                            "name": "length",
                            "text": "<p><code>BasicVal.length(desired_length, [options])</code></p>\n<p>Checks if the value has desired length.</p>\n"
                        },
                        {
                            "name": "max_length",
                            "text": "<p><code>BasicVal.max_length(max_length, [options])</code></p>\n<p>Checks if length of the value is less or equal to min_length.</p>\n"
                        },
                        {
                            "name": "maximum",
                            "text": "<p><code>BasicVal.maximum(max_val, [options])</code></p>\n<p>Checks if the value is less or equal to max_val.</p>\n"
                        },
                        {
                            "name": "min_length",
                            "text": "<p><code>BasicVal.min_length(min_length, [options])</code></p>\n<p>Checks if length of the value is greater or equal to min_length.</p>\n"
                        },
                        {
                            "name": "minimum",
                            "text": "<p><code>BasicVal.minimum(min_val, [options])</code></p>\n<p>Checks if the value is greater or equal to min_val.</p>\n"
                        },
                        {
                            "name": "multiple",
                            "code": [
                                {
                                    "type": "js",
                                    "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval.js",
                                    "contents": "//CODE\nvar validator = new FieldVal({\n\tvalue: \"test\"\n});\n\nvalidator.get(\n\t'value',\n\tBasicVal.multiple([\n        BasicVal.integer(),\n        BasicVal.prefix(\"abc\")\n    ])\n)\n\nconsole.log(JSON.stringify(validator.end(), null, 4));\n\n//OUTPUT\n{\n    \"invalid\": {\n        \"value\": {\n            \"error\": 115,\n            \"error_message\": \"None of the options were valid.\"\n        }\n    },\n    \"error_message\": \"One or more errors.\",\n    \"error\": 5\n}"
                                }
                            ],
                            "text": "<p><code>BasicVal.multiple(possibles, [options])</code></p>\n<p>Validates the value with multiple checks. Only one of the checks need to pass for the value to be valid.</p>\n<p><code>possibles</code> is an array of multiple checks</p>\n<p>In the example provided, a valid input would be either an integer or a string that begins with &quot;abc&quot;.</p>\n"
                        },
                        {
                            "name": "multiple_async",
                            "code": [
                                {
                                    "type": "js",
                                    "runnable": true,
                                    "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval.js",
                                    "runnable_contents": "var validator = new FieldVal({\n\tvalue: 15//Change to 20 to successfully pass .minimum check\n});\n\nvalidator.get_async(\n\t'value',\n\t[\n\t\tBasicVal.multiple_async([\n\t\t\t[\n\t\t\t\tBasicVal.integer(),function(val,emit,done){\n\t\t\t\t  setTimeout(function(){\n\t\t\t\t\tdone(BasicVal.minimum(20).check(val));\n\t\t\t\t  },1);\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\tBasicVal.prefix(\"abc\")\n\t\t\t]\n\t\t])\n\t]\n)\n\nvalidator.end(function(error){\n\tvar element = document.createElement(\"pre\");\n\telement.innerHTML = JSON.stringify(error, null, 4);\n\tdocument.body.appendChild(element);\n});",
                                    "contents": "var validator = new FieldVal({\n\tvalue: 15//Change to 20 to successfully pass .minimum check\n});\n\nvalidator.get_async(\n\t'value',\n\t[\n\t\tBasicVal.multiple_async([\n\t\t\t[\n\t\t\t\tBasicVal.integer(),function(val,emit,done){\n\t\t\t\t  setTimeout(function(){\n\t\t\t\t\tdone(BasicVal.minimum(20).check(val));\n\t\t\t\t  },1);\n\t\t\t\t}\n\t\t\t],\n\t\t\t[\n\t\t\t\tBasicVal.prefix(\"abc\")\n\t\t\t]\n\t\t])\n\t]\n)\n\nvalidator.end(function(error){\n\tconsole.log(error);\n});\n\n"
                                }
                            ],
                            "text": "<p><code>BasicVal.multiple_async(possibles, [options])</code></p>\n<p>Validates the value with multiple checks, allowing one or more of the checks to be asynchronous. Only one of the checks need to pass for the value to be valid.</p>\n<p><code>possibles</code> is an array of multiple checks.</p>\n<p>In the example provided, a valid input would be either an integer or a string that begins with &quot;abc&quot;.</p>\n"
                        },
                        {
                            "name": "no_whitespace",
                            "text": "<p><code>BasicVal.no_whitespace([options])</code></p>\n<p>Checks that there is no whitespace in the value.</p>\n"
                        },
                        {
                            "name": "not_empty",
                            "text": "<p><code>BasicVal.not_empty(trim, [options])</code></p>\n<p>Checks if the string value is not empty. <code>trim</code> is a boolean specifying whether the string needs to be trimmed before the check.</p>\n"
                        },
                        {
                            "name": "not_one_of",
                            "text": "<p><code>BasicVal.not_one_of(undesired_values, [options])</code></p>\n<p>Checks if the value is not equal to one of the undesired_values. <code>undesired_values</code> is an array.</p>\n"
                        },
                        {
                            "name": "one_of",
                            "text": "<p><code>BasicVal.one_of(desired_values, [options])</code></p>\n<p>Checks if the value is equal to one of the desired_values. <code>desired_values</code> is an array.</p>\n"
                        },
                        {
                            "name": "prefix",
                            "text": "<p><code>BasicVal.each(on_each, [options])</code></p>\n<p>Checks if the string value starts with the <code>desired_prefix</code>.</p>\n"
                        },
                        {
                            "name": "range",
                            "text": "<p><code>BasicVal.range(min_val, max_val, [options])</code></p>\n<p>Combines <a href=\"/docs/fieldval/BasicVal/minimum\">minimum</a> and <a href=\"/docs/fieldval/BasicVal/maximum\">maximum</a>.</p>\n"
                        },
                        {
                            "name": "start_with_letter",
                            "text": "<p><code>BasicVal.start_with_letter([options])</code></p>\n<p>Checks if the string value starts with a letter.</p>\n"
                        },
                        {
                            "name": "suffix",
                            "text": "<p><code>BasicVal.suffix(desired_suffix, [options])</code></p>\n<p>Checks if the string value ends with the <code>desired_suffix</code>.</p>\n"
                        }
                    ]
                }
            ]
        },
        {
            "name": "Options",
            "code": [
                {
                    "contents": "var my_number = validator.get(\n\t\"my_number\",\n\tBasicVal.float(\n\t\t{\n\t\t\t\"required\": true\n\t\t\t\"parse\": true,\n\t\t\t\"stop_on_error\": false\n\t\t}\n\t)\n);"
                }
            ],
            "text": "<p>Options are used to both pass values to a check and also to indicate to a FieldVal validator how to use the check.</p>\n",
            "sections": [
                {
                    "name": "stop_on_error",
                    "code": [
                        {
                            "type": "js",
                            "runnable": true,
                            "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval.js",
                            "contents": "var validator = new FieldVal({\n\t\"my_string\" : \"Testing\"\n})\n\nvar my_string = validator.get(\n\t\"my_string\",\n\tBasicVal.prefix(\n\t\t\"ABC\",\n\t\t{\n\t\t\t\"stop_on_error\" : false\n\t\t}\n\t),\n\tBasicVal.suffix(\n\t\t\"XYZ\"\n\t)\n)\n\ndocument.write(\"my_string: \"+my_string);\n\ndocument.write(\n\t\"<pre>\"+\n\t\tJSON.stringify(validator.end(),null,4)+\n\t\"</pre>\"\n);"
                        }
                    ],
                    "text": "<p>The <code>stop_on_error</code> flag indicates to a FieldVal validator whether or not the chain of checks should be halted if this check returns an error. This flag defaults to <code>true</code> because in most cases such as a string being passed to an integer check proceeded by a minimum check, the desired functionality would be to return a single error stating that the value was not an integer, rather than both the integer error and also an error stating that the value was below the specified limit.</p>\n<p>It can be useful to set <code>stop_on_error</code> to <code>false</code> if two checks are independent, e.g. having both a specific prefix and suffix. It would be best to return both errors rather than only inform the user that the suffix was invalid once they have corrected the prefix.</p>\n"
                },
                {
                    "name": "error",
                    "code": [
                        {
                            "type": "js",
                            "runnable": true,
                            "js_external": "__CURRENT_DOMAIN__/demo_files/fieldval.js",
                            "contents": "//CODE\nvar custom_error = {\n\terror: 1001,\n\terror_message: \"Custom integer error\"\n}\n\nBasicVal.integer(true, {\n\terror: custom_error\n}).check(\"test\")\n\n//OUTPUT\n{ error: 1001,\n  error_message: 'Custom integer error' }"
                        }
                    ],
                    "text": "<p>The <code>error</code> option overrides the standard error for <a href=\"/docs/fieldval/BasicVal\">BasicVal</a> checks.</p>\n"
                }
            ]
        }
    ]
}